{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/spice-app/src/components/Music/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudioControls\";\nimport Backdrop from \"./Backdrop\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = ({\n  tracks\n}) => {\n  _s();\n\n  // State\n  const [trackIndex, setTrackIndex] = useState(0);\n  const [trackProgress, setTrackProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false); // Destructure for conciseness\n\n  const {\n    title,\n    artist,\n    color,\n    image,\n    audioSrc\n  } = tracks[trackIndex]; // Refs\n\n  const audioRef = useRef(new Audio(audioSrc));\n  const intervalRef = useRef();\n  const isReady = useRef(false); // Destructure for conciseness\n\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? `${trackProgress / duration * 100}%` : \"0%\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextTrack();\n      } else {\n        setTrackProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setTrackProgress(audioRef.current.currentTime);\n  };\n\n  const onScrubEnd = () => {\n    // If not already playing, start\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  const toPrevTrack = () => {\n    if (trackIndex - 1 < 0) {\n      setTrackIndex(tracks.length - 1);\n    } else {\n      setTrackIndex(trackIndex - 1);\n    }\n  };\n\n  const toNextTrack = () => {\n    if (trackIndex < tracks.length - 1) {\n      setTrackIndex(trackIndex + 1);\n    } else {\n      setTrackIndex(0);\n    }\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]); // Handles cleanup and setup when changing tracks\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(audioSrc);\n    setTrackProgress(audioRef.current.currentTime);\n\n    if (isReady.current) {\n      audioRef.current.play();\n      setIsPlaying(true);\n      startTimer();\n    } else {\n      // Set the isReady ref as true for the next pass\n      isReady.current = true;\n    }\n  }, [trackIndex]);\n  useEffect(() => {\n    // Pause and clean up on unmount\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"artwork\",\n        src: image,\n        alt: `track artwork for ${title} by ${artist}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"artist\",\n        children: artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPlaying: isPlaying,\n        onPrevClick: toPrevTrack,\n        onNextClick: toNextTrack,\n        onPlayPauseClick: setIsPlaying\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        value: trackProgress,\n        step: \"1\",\n        min: \"0\",\n        max: duration ? duration : `${duration}`,\n        className: \"progress\",\n        onChange: e => onScrub(e.target.value),\n        onMouseUp: onScrubEnd,\n        onKeyUp: onScrubEnd,\n        style: {\n          background: trackStyling\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Backdrop, {\n      trackIndex: trackIndex,\n      activeColor: color,\n      isPlaying: isPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AudioPlayer, \"E9Pm1fLhcuO8D0WYi7gJIZx8ngQ=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/spice-app/src/components/Music/AudioPlayer.jsx"],"names":["React","useState","useEffect","useRef","AudioControls","Backdrop","AudioPlayer","tracks","trackIndex","setTrackIndex","trackProgress","setTrackProgress","isPlaying","setIsPlaying","title","artist","color","image","audioSrc","audioRef","Audio","intervalRef","isReady","duration","current","currentPercentage","trackStyling","startTimer","clearInterval","setInterval","ended","toNextTrack","currentTime","onScrub","value","onScrubEnd","toPrevTrack","length","play","pause","e","target","background"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudioControls\";\nimport Backdrop from \"./Backdrop\";\nimport \"./styles.css\";\n\n\nconst AudioPlayer = ({ tracks }) => {\n    // State\n    const [trackIndex, setTrackIndex] = useState(0);\n    const [trackProgress, setTrackProgress] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n\n    // Destructure for conciseness\n    const { title, artist, color, image, audioSrc } = tracks[trackIndex];\n\n    // Refs\n    const audioRef = useRef(new Audio(audioSrc));\n    const intervalRef = useRef();\n    const isReady = useRef(false);\n\n    // Destructure for conciseness\n    const { duration } = audioRef.current;\n\n    const currentPercentage = duration\n        ? `${(trackProgress / duration) * 100}%`\n        : \"0%\";\n    const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n    const startTimer = () => {\n        // Clear any timers already running\n        clearInterval(intervalRef.current);\n\n        intervalRef.current = setInterval(() => {\n            if (audioRef.current.ended) {\n                toNextTrack();\n            } else {\n                setTrackProgress(audioRef.current.currentTime);\n            }\n        }, [1000]);\n    };\n\n    const onScrub = (value) => {\n        // Clear any timers already running\n        clearInterval(intervalRef.current);\n        audioRef.current.currentTime = value;\n        setTrackProgress(audioRef.current.currentTime);\n    };\n\n    const onScrubEnd = () => {\n        // If not already playing, start\n        if (!isPlaying) {\n            setIsPlaying(true);\n        }\n        startTimer();\n    };\n\n    const toPrevTrack = () => {\n        if (trackIndex - 1 < 0) {\n            setTrackIndex(tracks.length - 1);\n        } else {\n            setTrackIndex(trackIndex - 1);\n        }\n    };\n\n    const toNextTrack = () => {\n        if (trackIndex < tracks.length - 1) {\n            setTrackIndex(trackIndex + 1);\n        } else {\n            setTrackIndex(0);\n        }\n    };\n\n    useEffect(() => {\n        if (isPlaying) {\n            audioRef.current.play();\n            startTimer();\n        } else {\n            audioRef.current.pause();\n        }\n    }, [isPlaying]);\n\n    // Handles cleanup and setup when changing tracks\n    useEffect(() => {\n        audioRef.current.pause();\n\n        audioRef.current = new Audio(audioSrc);\n        setTrackProgress(audioRef.current.currentTime);\n\n        if (isReady.current) {\n            audioRef.current.play();\n            setIsPlaying(true);\n            startTimer();\n        } else {\n            // Set the isReady ref as true for the next pass\n            isReady.current = true;\n        }\n    }, [trackIndex]);\n\n    useEffect(() => {\n        // Pause and clean up on unmount\n        return () => {\n            audioRef.current.pause();\n            clearInterval(intervalRef.current);\n        };\n    }, []);\n\n    return (\n        <div className=\"audio-player\">\n            <div className=\"track-info\">\n                <img\n                    className=\"artwork\"\n                    src={image}\n                    alt={`track artwork for ${title} by ${artist}`}\n                />\n                <h2 className=\"title\">{title}</h2>\n                <h3 className=\"artist\">{artist}</h3>\n                <AudioControls\n                    isPlaying={isPlaying}\n                    onPrevClick={toPrevTrack}\n                    onNextClick={toNextTrack}\n                    onPlayPauseClick={setIsPlaying}\n                />\n                <input\n                    type=\"range\"\n                    value={trackProgress}\n                    step=\"1\"\n                    min=\"0\"\n                    max={duration ? duration : `${duration}`}\n                    className=\"progress\"\n                    onChange={(e) => onScrub(e.target.value)}\n                    onMouseUp={onScrubEnd}\n                    onKeyUp={onScrubEnd}\n                    style={{ background: trackStyling }}\n                />\n            </div>\n            <Backdrop\n                trackIndex={trackIndex}\n                activeColor={color}\n                isPlaying={isPlaying}\n            />\n        </div>\n    );\n};\n\nexport default AudioPlayer;\n"]},"metadata":{},"sourceType":"module"}