{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport cardImages from '../Games/MemoryGameImages/imagedata.json';\nimport { selectedCardImage, imageVisibility } from '../../redux/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { shuffle } from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const [allImages, setAllImages] = useState([]);\n  const [selected, setSelected] = useState(null);\n  const [selectedImagesArray, setSelectedImagesArray] = useState([]);\n  const dispatch = useDispatch();\n  const selectedImage = useSelector(state => state.games.selected_card_images);\n  const visibleImage = useSelector(state => state.games.visible);\n  console.log(selectedImagesArray);\n\n  const handleGameReset = () => {\n    setAllImages([]);\n  };\n\n  const handLoadImage = () => {\n    setAllImages(shuffle(cardImages.images));\n  };\n\n  useEffect(() => {// dispatch(imageVisibility())\n  }, []);\n  const imgNames = selectedImagesArray.map(image => image.name);\n  console.log(imgNames);\n\n  const handleImageClick = (img, i) => {\n    setSelected(i);\n    setSelectedImagesArray([...selectedImagesArray, img].length === 1);\n  };\n\n  console.log(selected);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap \",\n      children: allImages === null || allImages === void 0 ? void 0 : allImages.map((img, i) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleImageClick(img, i),\n          className: ' border rounded-lg border-3 ',\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: i === selected && imgNames.includes(img.name) ? 'w-20 h-20 opacity-100' : ' w-20 h-20 opacity-0',\n            src: img.image,\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }, this)\n      }, void 0, false))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: Object.keys(allImages).length === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handLoadImage(),\n        className: \"text-gray-200 bg-indigo-900 text-3xl p-2 rounded-lg\",\n        children: \"START\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGameReset(),\n        className: \"text-gray-200 bg-red-900 text-3xl p-2 rounded-lg\",\n        children: \"End or Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MemoryGame, \"L1pzqkZmHVs3ulC4SvyZpLbBFEw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx"],"names":["React","useState","useEffect","Container","Row","Col","cardImages","selectedCardImage","imageVisibility","useSelector","useDispatch","shuffle","MemoryGame","allImages","setAllImages","selected","setSelected","selectedImagesArray","setSelectedImagesArray","dispatch","selectedImage","state","games","selected_card_images","visibleImage","visible","console","log","handleGameReset","handLoadImage","images","imgNames","map","image","name","handleImageClick","img","i","length","includes","Object","keys"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport cardImages from '../Games/MemoryGameImages/imagedata.json'\nimport { selectedCardImage, imageVisibility } from '../../redux/actions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { shuffle } from 'lodash'\n\n\nconst MemoryGame = () => {\n\n    const [allImages, setAllImages] = useState([])\n    const [selected, setSelected] = useState(null)\n    const [selectedImagesArray, setSelectedImagesArray] = useState([])\n\n    const dispatch = useDispatch()\n    const selectedImage = useSelector(state => state.games.selected_card_images)\n    const visibleImage = useSelector(state => state.games.visible)\n\n\n\n    console.log(selectedImagesArray)\n\n\n    const handleGameReset = () => {\n\n        setAllImages([])\n    }\n\n\n    const handLoadImage = () => {\n        setAllImages(shuffle(cardImages.images))\n    }\n\n    useEffect(() => {\n        // dispatch(imageVisibility())\n    }, [])\n\n    const imgNames = selectedImagesArray.map(image => image.name)\n    console.log(imgNames)\n\n\n    const handleImageClick = (img, i) => {\n        setSelected(i)\n        setSelectedImagesArray([...selectedImagesArray, img].length === 1)\n    }\n    console.log(selected)\n\n\n    return (\n        <div className=\"flex flex-col\">\n            <div className=\"flex flex-wrap \">\n                {\n                    allImages?.map((img, i) => (\n                        <>\n                            <div onClick={() => handleImageClick(img, i)} className={' border rounded-lg border-3 '}>\n                                <img className={i === selected && imgNames.includes(img.name) ? 'w-20 h-20 opacity-100' : ' w-20 h-20 opacity-0'} src={img.image} alt=\"\" />\n                            </div>\n\n                        </>\n                    ))\n                }\n\n            </div>\n            <div className='text-center'>\n                {Object.keys(allImages).length === 0\n                    ?\n                    <button onClick={() => handLoadImage()} className=\"text-gray-200 bg-indigo-900 text-3xl p-2 rounded-lg\">START</button>\n                    :\n                    <button onClick={() => handleGameReset()} className=\"text-gray-200 bg-red-900 text-3xl p-2 rounded-lg\">End or Reset</button>\n                }\n            </div>\n        </div>\n\n    )\n}\n\nexport default MemoryGame\n"]},"metadata":{},"sourceType":"module"}