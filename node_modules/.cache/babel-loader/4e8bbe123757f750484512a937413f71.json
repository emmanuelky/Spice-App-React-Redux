{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport cardImages from '../Games/MemoryGameImages/imagedata.json';\nimport { selectedCardImage, imageVisibility } from '../../redux/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { shuffle } from 'lodash';\nimport { ImImages } from 'react-icons/im';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  var _cardImages$images;\n\n  const [openedCard, setOpenedCard] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const pokemons = [{\n    id: 1,\n    name: \"balbasaur\"\n  }, {\n    id: 8,\n    name: \"wartotle\"\n  }, {\n    id: 9,\n    name: \"blastoise\"\n  }, {\n    id: 6,\n    name: \"charizard\"\n  }]; //currently there are 4 pokemons but we need the pair\n\n  const pairOfPokemons = [...pokemons, ...pokemons];\n\n  function flipCard(index) {\n    setOpenedCard(opened => [...opened, index]);\n  }\n\n  useEffect(() => {\n    if (openedCard < 2) return;\n    const firstMatched = pairOfPokemons[openedCard[0]];\n    const secondMatched = pairOfPokemons[openedCard[1]];\n\n    if (secondMatched && firstMatched.id === secondMatched.id) {\n      setMatched([...matched, firstMatched.id]);\n    }\n\n    if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n  }, [openedCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: cardImages === null || cardImages === void 0 ? void 0 : (_cardImages$images = cardImages.images) === null || _cardImages$images === void 0 ? void 0 : _cardImages$images.map((pokemon, index) => {\n        //lets flip the card\n        let isFlipped = false;\n        if (openedCard.includes(index)) isFlipped = true;\n        if (matched.includes(pokemon.id)) isFlipped = true;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `pokemon-card ${isFlipped ? \"flipped\" : \"\"} `,\n          onClick: () => flipCard(index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"front\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: `${url}/${pokemon.id}.png`,\n                alt: \"pokemon-name\",\n                width: \"100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MemoryGame, \"LdtdY62CIKHtEkmkp/AjHMW5P4M=\");\n\n_c = MemoryGame;\nexport default MemoryGame; // const [allImages, setAllImages] = useState([])\n// const [selected, setSelected] = useState([])\n// const [selectedImagesArray, setSelectedImagesArray] = useState([])\n// const [imageUniqueName, setImageUniqueName] = useState(null)\n// const [isVisible, setIsVisible] = useState(false)\n// const dispatch = useDispatch()\n// const selectedImage = useSelector(state => state.games.selected_card_images)\n// const visibleImage = useSelector(state => state.games.visible)\n// const handleGameReset = () => {\n//     setAllImages([])\n// }\n// const handLoadImage = () => {\n//     setAllImages(shuffle(cardImages.images))\n// }\n// useEffect(() => {\n// }, [])\n// console.log(selected)\n// let uniqueImagePairs;\n// selected?.length > 0 ? uniqueImagePairs = selected : uniqueImagePairs = []\n// const handleVisible = (img, i) => {\n//     if (selected?.includes(img.id)) {\n//         setIsVisible(true)\n//     }\n// }\n// const handleImageClick = (img, i) => {\n//     setSelected([img.id, img.name])\n//     setSelectedImagesArray([...selectedImagesArray, uniqueImagePairs])\n//     handleVisible(img, i)\n// }\n// return (\n//     <div className=\"flex flex-col\">\n//         <div className=\"flex flex-wrap \">\n//             {\n//                 allImages?.map((img, i) => (\n//                     <>\n//                         <div onClick={() => handleImageClick(img, i)} className={' border rounded-lg border-3 '}>\n//                             <img className={isVisible ? 'w-20 h-20 opacity-100 ' : 'w-20 h-20 opacity-0 '} src={img.image} alt=\"\" />\n//                         </div>\n//                     </>\n//                 ))\n//             }\n//         </div>\n//         <div className='text-center'>\n//             {Object.keys(allImages).length === 0\n//                 ?\n//                 <button onClick={() => handLoadImage()} className=\"text-gray-200 bg-indigo-900 text-xl p-2 rounded-lg\">START</button>\n//                 :\n//                 <button onClick={() => handleGameReset()} className=\"text-gray-200 bg-red-600 text-xl p-2 rounded-lg\">End or Reset</button>\n//             }\n//         </div>\n//     </div>\n// )\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx"],"names":["React","useState","useEffect","Container","Row","Col","cardImages","selectedCardImage","imageVisibility","useSelector","useDispatch","shuffle","ImImages","MemoryGame","openedCard","setOpenedCard","matched","setMatched","pokemons","id","name","pairOfPokemons","flipCard","index","opened","firstMatched","secondMatched","length","setTimeout","images","map","pokemon","isFlipped","includes","url"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport cardImages from '../Games/MemoryGameImages/imagedata.json'\nimport { selectedCardImage, imageVisibility } from '../../redux/actions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { shuffle } from 'lodash'\nimport { ImImages } from 'react-icons/im'\n\n\nconst MemoryGame = () => {\n\n    const [openedCard, setOpenedCard] = useState([]);\n    const [matched, setMatched] = useState([]);\n\n    const pokemons = [\n        { id: 1, name: \"balbasaur\" },\n        { id: 8, name: \"wartotle\" },\n        { id: 9, name: \"blastoise\" },\n        { id: 6, name: \"charizard\" }\n    ];\n\n    //currently there are 4 pokemons but we need the pair\n\n    const pairOfPokemons = [...pokemons, ...pokemons];\n\n    function flipCard(index) {\n        setOpenedCard((opened) => [...opened, index]);\n    }\n\n    useEffect(() => {\n        if (openedCard < 2) return;\n\n        const firstMatched = pairOfPokemons[openedCard[0]];\n        const secondMatched = pairOfPokemons[openedCard[1]];\n\n        if (secondMatched && firstMatched.id === secondMatched.id) {\n            setMatched([...matched, firstMatched.id]);\n        }\n\n        if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n    }, [openedCard]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"cards\">\n                {cardImages?.images?.map((pokemon, index) => {\n                    //lets flip the card\n\n                    let isFlipped = false;\n\n                    if (openedCard.includes(index)) isFlipped = true;\n                    if (matched.includes(pokemon.id)) isFlipped = true;\n                    return (\n                        <div\n                            className={`pokemon-card ${isFlipped ? \"flipped\" : \"\"} `}\n                            key={index}\n                            onClick={() => flipCard(index)}\n                        >\n                            <div className=\"inner\">\n                                <div className=\"front\">\n                                    <img\n                                        src={`${url}/${pokemon.id}.png`}\n                                        alt=\"pokemon-name\"\n                                        width=\"100\"\n                                    />\n                                </div>\n                                <div className=\"back\"></div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\n\n\n\nexport default MemoryGame\n\n\n// const [allImages, setAllImages] = useState([])\n// const [selected, setSelected] = useState([])\n// const [selectedImagesArray, setSelectedImagesArray] = useState([])\n// const [imageUniqueName, setImageUniqueName] = useState(null)\n// const [isVisible, setIsVisible] = useState(false)\n\n\n// const dispatch = useDispatch()\n// const selectedImage = useSelector(state => state.games.selected_card_images)\n// const visibleImage = useSelector(state => state.games.visible)\n\n\n\n// const handleGameReset = () => {\n\n//     setAllImages([])\n// }\n\n\n// const handLoadImage = () => {\n//     setAllImages(shuffle(cardImages.images))\n// }\n\n// useEffect(() => {\n\n// }, [])\n\n// console.log(selected)\n\n\n// let uniqueImagePairs;\n// selected?.length > 0 ? uniqueImagePairs = selected : uniqueImagePairs = []\n\n\n// const handleVisible = (img, i) => {\n\n//     if (selected?.includes(img.id)) {\n\n//         setIsVisible(true)\n//     }\n// }\n\n\n\n// const handleImageClick = (img, i) => {\n//     setSelected([img.id, img.name])\n//     setSelectedImagesArray([...selectedImagesArray, uniqueImagePairs])\n\n//     handleVisible(img, i)\n// }\n\n\n\n// return (\n//     <div className=\"flex flex-col\">\n//         <div className=\"flex flex-wrap \">\n//             {\n//                 allImages?.map((img, i) => (\n//                     <>\n\n//                         <div onClick={() => handleImageClick(img, i)} className={' border rounded-lg border-3 '}>\n//                             <img className={isVisible ? 'w-20 h-20 opacity-100 ' : 'w-20 h-20 opacity-0 '} src={img.image} alt=\"\" />\n//                         </div>\n\n//                     </>\n//                 ))\n//             }\n\n//         </div>\n//         <div className='text-center'>\n//             {Object.keys(allImages).length === 0\n//                 ?\n//                 <button onClick={() => handLoadImage()} className=\"text-gray-200 bg-indigo-900 text-xl p-2 rounded-lg\">START</button>\n//                 :\n//                 <button onClick={() => handleGameReset()} className=\"text-gray-200 bg-red-600 text-xl p-2 rounded-lg\">End or Reset</button>\n//             }\n//         </div>\n//     </div>\n\n// )"]},"metadata":{},"sourceType":"module"}