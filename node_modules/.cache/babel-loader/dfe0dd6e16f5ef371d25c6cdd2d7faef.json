{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = () => {\n  _s();\n\n  const [unique_id, setUnique_id] = useState('');\n  const lastMessageView = useRef(null);\n  const allPosts = useSelector(state => state.posts.posts);\n  const uniquePostID = allPosts.map(post => post.id);\n  const fetchAllComments = useSelector(state => state.posts.comments); // const allCommentsArray = fetchAllComments.map(comment => comment.data.post_Id)\n  // console.log(uniquePostID)\n\n  console.log(fetchAllComments);\n  useEffect(() => {\n    for (let i = 0; i < uniquePostID.length; i++) {\n      setUnique_id(uniquePostID[i]);\n    }\n  }, []);\n  const uniquePostComment = fetchAllComments.filter(id => id === unique_id);\n  console.log(uniquePostComment);\n  useEffect(() => {\n    if (fetchAllComments.length - 1 && lastMessageView.current) {\n      lastMessageView.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [fetchAllComments.length]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(Comments, \"wX8bqOWTig5dIX7dMm5A/doJdtk=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/spice-app/src/components/Feeds/Comments.jsx"],"names":["React","useState","useEffect","useRef","useSelector","useDispatch","Comments","unique_id","setUnique_id","lastMessageView","allPosts","state","posts","uniquePostID","map","post","id","fetchAllComments","comments","console","log","i","length","uniquePostComment","filter","current","scrollIntoView","behavior"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMQ,eAAe,GAAGN,MAAM,CAAC,IAAD,CAA9B;AAEA,QAAMO,QAAQ,GAAGN,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYA,KAAtB,CAA5B;AACA,QAAMC,YAAY,GAAGH,QAAQ,CAACI,GAAT,CAAaC,IAAI,IAAIA,IAAI,CAACC,EAA1B,CAArB;AAEA,QAAMC,gBAAgB,GAAGb,WAAW,CAACO,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYM,QAAtB,CAApC,CATmB,CAUnB;AAGA;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,gBAAZ;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACZ,SAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,YAAY,CAACS,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1Cb,MAAAA,YAAY,CAACK,YAAY,CAACQ,CAAD,CAAb,CAAZ;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAME,iBAAiB,GAAGN,gBAAgB,CAACO,MAAjB,CAAwBR,EAAE,IAAIA,EAAE,KAAKT,SAArC,CAA1B;AACAY,EAAAA,OAAO,CAACC,GAAR,CAAYG,iBAAZ;AAKArB,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIe,gBAAgB,CAACK,MAAjB,GAA0B,CAA1B,IAA+Bb,eAAe,CAACgB,OAAnD,EAA4D;AACxDhB,MAAAA,eAAe,CAACgB,OAAhB,CAAwBC,cAAxB,CAAuC;AACnCC,QAAAA,QAAQ,EAAE;AADyB,OAAvC;AAGH;AACJ,GAPQ,EAON,CAACV,gBAAgB,CAACK,MAAlB,CAPM,CAAT;AAUA,sBACI,qCADJ;AAuBH,CA7DD;;GAAMhB,Q;UAMeF,W,EAGQA,W;;;KATvBE,Q;AA+DN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\n\nconst Comments = () => {\n\n    const [unique_id, setUnique_id] = useState('')\n\n    const lastMessageView = useRef(null);\n\n    const allPosts = useSelector(state => state.posts.posts)\n    const uniquePostID = allPosts.map(post => post.id)\n\n    const fetchAllComments = useSelector(state => state.posts.comments)\n    // const allCommentsArray = fetchAllComments.map(comment => comment.data.post_Id)\n\n\n    // console.log(uniquePostID)\n    console.log(fetchAllComments)\n\n    useEffect(() => {\n        for (let i = 0; i < uniquePostID.length; i++) {\n            setUnique_id(uniquePostID[i])\n        }\n    }, [])\n\n    const uniquePostComment = fetchAllComments.filter(id => id === unique_id);\n    console.log(uniquePostComment)\n\n\n\n\n    useEffect(() => {\n\n        if (fetchAllComments.length - 1 && lastMessageView.current) {\n            lastMessageView.current.scrollIntoView({\n                behavior: \"smooth\",\n            });\n        }\n    }, [fetchAllComments.length])\n\n\n    return (\n        <>\n            {/* <div className={` flex flex-col mx-1 overflow-y-auto h-80 `}>\n                {\n                    fetchedComment?.data.map(comment => (\n                        <div ref={lastMessageView} className=\" bg-gray-50 rounded-lg my-2 px-2\">\n                            <div className=\"flex justify-between my-2\">\n                                <div className=\"flex align-items-center\">\n                                    <img className=\"h-5 w-5 rounded-full\" src={comment.user.image} alt=\"\" />\n                                    <i className=\"text-xs mx-2 font-bold\">{comment.user.firstName}</i>\n                                </div>\n                                <div>  <span className=\"text-xs\">@{comment.createdAt}</span></div>\n\n                            </div>\n                            <div className=\" mx-4 my-2\">\n                                <span className=\"text-lg break-words text-justify\">{comment.commentText}</span>\n                            </div>\n\n                        </div>))\n                }\n            </div> */}\n        </>\n    )\n}\n\nexport default Comments\n"]},"metadata":{},"sourceType":"module"}