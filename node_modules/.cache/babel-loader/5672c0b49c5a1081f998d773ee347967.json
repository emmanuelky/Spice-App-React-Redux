{"ast":null,"code":"/*\nCopyright (c) 2020 Daybrush\nname: @scena/matrix\nlicense: MIT\nauthor: Daybrush\nrepository: git+https://github.com/daybrush/matrix\nversion: 1.1.1\n*/\nimport { throttle, TINY_NUM, average } from '@daybrush/utils';\n\nfunction add(matrix, inverseMatrix, startIndex, fromIndex, n, k) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    var fromX = fromIndex + i * n;\n    matrix[x] += matrix[fromX] * k;\n    inverseMatrix[x] += inverseMatrix[fromX] * k;\n  }\n}\n\nfunction swap(matrix, inverseMatrix, startIndex, fromIndex, n) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    var fromX = fromIndex + i * n;\n    var v = matrix[x];\n    var iv = inverseMatrix[x];\n    matrix[x] = matrix[fromX];\n    matrix[fromX] = v;\n    inverseMatrix[x] = inverseMatrix[fromX];\n    inverseMatrix[fromX] = iv;\n  }\n}\n\nfunction divide(matrix, inverseMatrix, startIndex, n, k) {\n  for (var i = 0; i < n; ++i) {\n    var x = startIndex + i * n;\n    matrix[x] /= k;\n    inverseMatrix[x] /= k;\n  }\n}\n/**\n *\n * @namespace Matrix\n */\n\n/**\n * @memberof Matrix\n */\n\n\nfunction ignoreDimension(matrix, m, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = matrix.slice();\n\n  for (var i = 0; i < n; ++i) {\n    newMatrix[i * n + m - 1] = 0;\n    newMatrix[(m - 1) * n + i] = 0;\n  }\n\n  newMatrix[(m - 1) * (n + 1)] = 1;\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction invert(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = matrix.slice();\n  var inverseMatrix = createIdentityMatrix(n);\n\n  for (var i = 0; i < n; ++i) {\n    // diagonal\n    var identityIndex = n * i + i;\n\n    if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n      // newMatrix[identityIndex] = 0;\n      for (var j = i + 1; j < n; ++j) {\n        if (newMatrix[n * i + j]) {\n          swap(newMatrix, inverseMatrix, i, j, n);\n          break;\n        }\n      }\n    }\n\n    if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n      // no inverse matrix\n      return [];\n    }\n\n    divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n\n    for (var j = 0; j < n; ++j) {\n      var targetStartIndex = j;\n      var targetIndex = j + i * n;\n      var target = newMatrix[targetIndex];\n\n      if (!throttle(target, TINY_NUM) || i === j) {\n        continue;\n      }\n\n      add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n    }\n  }\n\n  return inverseMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction transpose(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = [];\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < n; ++j) {\n      newMatrix[j * n + i] = matrix[n * i + j];\n    }\n  }\n\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction getOrigin(matrix, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var originMatrix = [];\n  var w = matrix[n * n - 1];\n\n  for (var i = 0; i < n - 1; ++i) {\n    originMatrix[i] = matrix[n * (n - 1) + i] / w;\n  }\n\n  originMatrix[n - 1] = 0;\n  return originMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction fromTranslation(pos, n) {\n  var newMatrix = createIdentityMatrix(n);\n\n  for (var i = 0; i < n - 1; ++i) {\n    newMatrix[n * (n - 1) + i] = pos[i] || 0;\n  }\n\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction convertPositionMatrix(matrix, n) {\n  var newMatrix = matrix.slice();\n\n  for (var i = matrix.length; i < n - 1; ++i) {\n    newMatrix[i] = 0;\n  }\n\n  newMatrix[n - 1] = 1;\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction convertDimension(matrix, n, m) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  } // n < m\n\n\n  if (n === m) {\n    return matrix;\n  }\n\n  var newMatrix = createIdentityMatrix(m);\n  var length = Math.min(n, m);\n\n  for (var i = 0; i < length - 1; ++i) {\n    for (var j = 0; j < length - 1; ++j) {\n      newMatrix[i * m + j] = matrix[i * n + j];\n    }\n\n    newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n    newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n  }\n\n  newMatrix[m * m - 1] = matrix[n * n - 1];\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction multiplies(n) {\n  var matrixes = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    matrixes[_i - 1] = arguments[_i];\n  }\n\n  var m = createIdentityMatrix(n);\n  matrixes.forEach(function (matrix) {\n    m = multiply(m, matrix, n);\n  });\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction multiply(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = Math.sqrt(matrix.length);\n  }\n\n  var newMatrix = []; // 1 y: n\n  // 1 x: m\n  // 2 x: m\n  // 2 y: k\n  // n * m X m * k\n\n  var m = matrix.length / n;\n  var k = matrix2.length / m;\n\n  if (!m) {\n    return matrix2;\n  } else if (!k) {\n    return matrix;\n  }\n\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < k; ++j) {\n      newMatrix[j * n + i] = 0;\n\n      for (var l = 0; l < m; ++l) {\n        // m1 x: m(l), y: n(i)\n        // m2 x: k(j):  y: m(l)\n        // nw x: n(i), y: k(j)\n        newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n      }\n    }\n  } // n * k\n\n\n  return newMatrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction plus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] + pos2[i];\n  }\n\n  return nextPos;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction minus(pos1, pos2) {\n  var length = Math.min(pos1.length, pos2.length);\n  var nextPos = pos1.slice();\n\n  for (var i = 0; i < length; ++i) {\n    nextPos[i] = nextPos[i] - pos2[i];\n  }\n\n  return nextPos;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction convertCSStoMatrix(a, is2d) {\n  if (is2d === void 0) {\n    is2d = a.length === 6;\n  }\n\n  if (is2d) {\n    return [a[0], a[1], 0, a[2], a[3], 0, a[4], a[5], 1];\n  }\n\n  return a;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction convertMatrixtoCSS(a, is2d) {\n  if (is2d === void 0) {\n    is2d = a.length === 9;\n  }\n\n  if (is2d) {\n    return [a[0], a[1], a[3], a[4], a[6], a[7]];\n  }\n\n  return a;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction calculate(matrix, matrix2, n) {\n  if (n === void 0) {\n    n = matrix2.length;\n  }\n\n  var result = multiply(matrix, matrix2, n);\n  var k = result[n - 1];\n  return result.map(function (v) {\n    return v / k;\n  });\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction rotateX3d(matrix, rad) {\n  return multiply(matrix, [1, 0, 0, 0, 0, Math.cos(rad), Math.sin(rad), 0, 0, -Math.sin(rad), Math.cos(rad), 0, 0, 0, 0, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction rotateY3d(matrix, rad) {\n  return multiply(matrix, [Math.cos(rad), 0, -Math.sin(rad), 0, 0, 1, 0, 0, Math.sin(rad), 0, Math.cos(rad), 0, 0, 0, 0, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction rotateZ3d(matrix, rad) {\n  return multiply(matrix, createRotateMatrix(rad, 4));\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction scale3d(matrix, _a) {\n  var _b = _a[0],\n      sx = _b === void 0 ? 1 : _b,\n      _c = _a[1],\n      sy = _c === void 0 ? 1 : _c,\n      _d = _a[2],\n      sz = _d === void 0 ? 1 : _d;\n  return multiply(matrix, [sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction rotate(pos, rad) {\n  return calculate(createRotateMatrix(rad, 3), convertPositionMatrix(pos, 3));\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction translate3d(matrix, _a) {\n  var _b = _a[0],\n      tx = _b === void 0 ? 0 : _b,\n      _c = _a[1],\n      ty = _c === void 0 ? 0 : _c,\n      _d = _a[2],\n      tz = _d === void 0 ? 0 : _d;\n  return multiply(matrix, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1], 4);\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction matrix3d(matrix1, matrix2) {\n  return multiply(matrix1, matrix2, 4);\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction createRotateMatrix(rad, n) {\n  var cos = Math.cos(rad);\n  var sin = Math.sin(rad);\n  var m = createIdentityMatrix(n); // cos -sin\n  // sin cos\n\n  m[0] = cos;\n  m[1] = sin;\n  m[n] = -sin;\n  m[n + 1] = cos;\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction createIdentityMatrix(n) {\n  var length = n * n;\n  var matrix = [];\n\n  for (var i = 0; i < length; ++i) {\n    matrix[i] = i % (n + 1) ? 0 : 1;\n  }\n\n  return matrix;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction createScaleMatrix(scale, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(scale.length, n - 1);\n\n  for (var i = 0; i < length; ++i) {\n    m[(n + 1) * i] = scale[i];\n  }\n\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction createOriginMatrix(origin, n) {\n  var m = createIdentityMatrix(n);\n  var length = Math.min(origin.length, n - 1);\n\n  for (var i = 0; i < length; ++i) {\n    m[n * (n - 1) + i] = origin[i];\n  }\n\n  return m;\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction createWarpMatrix(pos0, pos1, pos2, pos3, nextPos0, nextPos1, nextPos2, nextPos3) {\n  var x0 = pos0[0],\n      y0 = pos0[1];\n  var x1 = pos1[0],\n      y1 = pos1[1];\n  var x2 = pos2[0],\n      y2 = pos2[1];\n  var x3 = pos3[0],\n      y3 = pos3[1];\n  var u0 = nextPos0[0],\n      v0 = nextPos0[1];\n  var u1 = nextPos1[0],\n      v1 = nextPos1[1];\n  var u2 = nextPos2[0],\n      v2 = nextPos2[1];\n  var u3 = nextPos3[0],\n      v3 = nextPos3[1];\n  var matrix = [x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, x0, 0, x1, 0, x2, 0, x3, 0, y0, 0, y1, 0, y2, 0, y3, 0, 1, 0, 1, 0, 1, 0, 1, -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3, -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3];\n  var inverseMatrix = invert(matrix, 8);\n\n  if (!inverseMatrix.length) {\n    return [];\n  }\n\n  var h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n  h[8] = 1;\n  return convertDimension(transpose(h), 3, 4);\n}\n/**\n * @memberof Matrix\n */\n\n\nfunction getCenter(points) {\n  return [0, 1].map(function (i) {\n    return average(points.map(function (pos) {\n      return pos[i];\n    }));\n  });\n}\n\nexport { calculate, convertCSStoMatrix, convertDimension, convertMatrixtoCSS, convertPositionMatrix, createIdentityMatrix, createOriginMatrix, createRotateMatrix, createScaleMatrix, createWarpMatrix, fromTranslation, getCenter, getOrigin, ignoreDimension, invert, matrix3d, minus, multiplies, multiply, plus, rotate, rotateX3d, rotateY3d, rotateZ3d, scale3d, translate3d, transpose };","map":{"version":3,"sources":["../src/index.ts"],"names":["i","x","startIndex","fromX","fromIndex","matrix","inverseMatrix","v","iv","ignoreDimension","m","Math","newMatrix","n","invert","createIdentityMatrix","identityIndex","throttle","j","swap","divide","targetStartIndex","targetIndex","target","add","transpose","getOrigin","originMatrix","w","fromTranslation","pos","convertPositionMatrix","convertDimension","length","multiplies","matrixes","multiply","matrix2","k","l","plus","pos1","pos2","nextPos","minus","convertCSStoMatrix","a","convertMatrixtoCSS","calculate","result","rotateX3d","rad","rotateY3d","rotateZ3d","createRotateMatrix","scale3d","_a","_b","_c","_d","rotate","translate3d","matrix3d","matrix1","cos","sin","createScaleMatrix","scale","createOriginMatrix","origin","createWarpMatrix","pos0","pos3","nextPos0","nextPos1","nextPos2","nextPos3","y0","y1","y2","y3","v0","v1","v2","v3","h","getCenter","points"],"mappings":"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","sourcesContent":["import { average, throttle, TINY_NUM } from \"@daybrush/utils\";\n\nfunction add(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        matrix[x] += matrix[fromX] * k;\n        inverseMatrix[x] += inverseMatrix[fromX] * k;\n    }\n}\n\nfunction swap(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    fromIndex: number,\n    n: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n        const fromX = fromIndex + i * n;\n        const v = matrix[x];\n        const iv = inverseMatrix[x];\n\n        matrix[x] = matrix[fromX];\n        matrix[fromX] = v;\n\n        inverseMatrix[x] = inverseMatrix[fromX];\n        inverseMatrix[fromX] = iv;\n    }\n}\n\nfunction divide(\n    matrix: number[],\n    inverseMatrix: number[],\n    startIndex: number,\n    n: number,\n    k: number,\n) {\n    for (let i = 0; i < n; ++i) {\n        const x = startIndex + i * n;\n\n        matrix[x] /= k;\n        inverseMatrix[x] /= k;\n    }\n}\n\n/**\n *\n * @namespace Matrix\n */\n/**\n * @memberof Matrix\n */\nexport function ignoreDimension(\n    matrix: number[],\n    m: number,\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n\n    for (let i = 0; i < n; ++i) {\n        newMatrix[i * n + m - 1] = 0;\n        newMatrix[(m - 1) * n + i] = 0;\n    }\n    newMatrix[(m - 1) * (n + 1)] = 1;\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function invert(\n    matrix: number[],\n    n: number = Math.sqrt(matrix.length),\n) {\n    const newMatrix = matrix.slice();\n    const inverseMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n; ++i) {\n        // diagonal\n        const identityIndex = n * i + i;\n\n        if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n            // newMatrix[identityIndex] = 0;\n            for (let j = i + 1; j < n; ++j) {\n                if (newMatrix[n * i + j]) {\n                    swap(newMatrix, inverseMatrix, i, j, n);\n                    break;\n                }\n            }\n        }\n        if (!throttle(newMatrix[identityIndex], TINY_NUM)) {\n            // no inverse matrix\n            return [];\n        }\n        divide(newMatrix, inverseMatrix, i, n, newMatrix[identityIndex]);\n        for (let j = 0; j < n; ++j) {\n            const targetStartIndex = j;\n            const targetIndex = j + i * n;\n            const target = newMatrix[targetIndex];\n\n            if (!throttle(target, TINY_NUM) || i === j) {\n                continue;\n            }\n            add(newMatrix, inverseMatrix, targetStartIndex, i, n, -target);\n        }\n    }\n\n    return inverseMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function transpose(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < n; ++j) {\n            newMatrix[j * n + i] = matrix[n * i + j];\n        }\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function getOrigin(matrix: number[], n: number = Math.sqrt(matrix.length)) {\n    const originMatrix: number[] = [];\n    const w = matrix[n * n - 1];\n    for (let i = 0; i < n - 1; ++i) {\n        originMatrix[i] = matrix[n * (n - 1) + i] / w;\n    }\n    originMatrix[n - 1] = 0;\n    return originMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function fromTranslation(pos: number[], n: number) {\n    const newMatrix = createIdentityMatrix(n);\n\n    for (let i = 0; i < n - 1; ++i) {\n        newMatrix[n * (n - 1) + i] = pos[i] || 0;\n    }\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertPositionMatrix(matrix: number[], n: number) {\n    const newMatrix = matrix.slice();\n\n    for (let i = matrix.length; i < n - 1; ++i) {\n        newMatrix[i] = 0;\n    }\n    newMatrix[n - 1] = 1;\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertDimension(matrix: number[], n: number = Math.sqrt(matrix.length), m: number) {\n    // n < m\n    if (n === m) {\n        return matrix;\n    }\n    const newMatrix = createIdentityMatrix(m);\n\n    const length = Math.min(n, m);\n    for (let i = 0; i < length - 1; ++i) {\n        for (let j = 0; j < length - 1; ++j) {\n            newMatrix[i * m + j] = matrix[i * n + j];\n        }\n\n        newMatrix[(i + 1) * m - 1] = matrix[(i + 1) * n - 1];\n        newMatrix[(m - 1) * m + i] = matrix[(n - 1) * n + i];\n    }\n    newMatrix[m * m - 1] = matrix[n * n - 1];\n\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiplies(n: number, ...matrixes: number[][]) {\n    let m: number[] = createIdentityMatrix(n);\n\n    matrixes.forEach(matrix => {\n        m = multiply(m, matrix, n);\n    });\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function multiply(matrix: number[], matrix2: number[], n: number = Math.sqrt(matrix.length)) {\n    const newMatrix: number[] = [];\n    // 1 y: n\n    // 1 x: m\n    // 2 x: m\n    // 2 y: k\n    // n * m X m * k\n    const m = matrix.length / n;\n    const k = matrix2.length / m;\n\n    if (!m) {\n        return matrix2;\n    } else if (!k) {\n        return matrix;\n    }\n    for (let i = 0; i < n; ++i) {\n        for (let j = 0; j < k; ++j) {\n            newMatrix[j * n + i] = 0;\n            for (let l = 0; l < m; ++l) {\n                // m1 x: m(l), y: n(i)\n                // m2 x: k(j):  y: m(l)\n                // nw x: n(i), y: k(j)\n                newMatrix[j * n + i] += matrix[l * n + i] * matrix2[j * m + l];\n            }\n        }\n    }\n    // n * k\n    return newMatrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function plus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] + pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function minus(pos1: number[], pos2: number[]) {\n    const length = Math.min(pos1.length, pos2.length);\n    const nextPos = pos1.slice();\n\n    for (let i = 0; i < length; ++i) {\n        nextPos[i] = nextPos[i] - pos2[i];\n    }\n    return nextPos;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertCSStoMatrix(a: number[], is2d: boolean = a.length === 6) {\n    if (is2d) {\n        return [\n            a[0], a[1], 0,\n            a[2], a[3], 0,\n            a[4], a[5], 1,\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function convertMatrixtoCSS(a: number[], is2d: boolean = a.length === 9) {\n    if (is2d) {\n        return [\n            a[0], a[1],\n            a[3], a[4],\n            a[6], a[7],\n        ];\n    }\n    return a;\n}\n\n/**\n * @memberof Matrix\n */\nexport function calculate(matrix: number[], matrix2: number[], n: number = matrix2.length) {\n    const result = multiply(matrix, matrix2, n);\n    const k = result[n - 1];\n    return result.map(v => v / k);\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateX3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, Math.cos(rad), Math.sin(rad), 0,\n            0, -Math.sin(rad), Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateY3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        [\n            Math.cos(rad), 0, -Math.sin(rad), 0,\n            0, 1, 0, 0,\n            Math.sin(rad), 0, Math.cos(rad), 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotateZ3d(matrix: number[], rad: number) {\n    return multiply(\n        matrix,\n        createRotateMatrix(rad, 4),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function scale3d(matrix: number[], [\n    sx = 1,\n    sy = 1,\n    sz = 1,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            sx, 0, 0, 0,\n            0, sy, 0, 0,\n            0, 0, sz, 0,\n            0, 0, 0, 1,\n        ],\n        4,\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function rotate(pos: number[], rad: number) {\n    return calculate(\n        createRotateMatrix(rad, 3),\n        convertPositionMatrix(pos, 3),\n    );\n}\n\n/**\n * @memberof Matrix\n */\nexport function translate3d(matrix, [\n    tx = 0,\n    ty = 0,\n    tz = 0,\n]: number[]) {\n    return multiply(\n        matrix,\n        [\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            tx, ty, tz, 1,\n        ],\n        4,\n    );\n}\n/**\n * @memberof Matrix\n */\nexport function matrix3d(matrix1: number[], matrix2: number[]) {\n    return multiply(matrix1, matrix2, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function createRotateMatrix(rad: number, n: number) {\n    const cos = Math.cos(rad);\n    const sin = Math.sin(rad);\n    const m = createIdentityMatrix(n);\n\n    // cos -sin\n    // sin cos\n    m[0] = cos;\n    m[1] = sin;\n    m[n] = -sin;\n    m[n + 1] = cos;\n\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createIdentityMatrix(n: number) {\n    const length = n * n;\n    const matrix: number[] = [];\n\n    for (let i = 0; i < length; ++i) {\n        matrix[i] = i % (n + 1) ? 0 : 1;\n    }\n    return matrix;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createScaleMatrix(scale: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(scale.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[(n + 1) * i] = scale[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createOriginMatrix(origin: number[], n: number) {\n    const m = createIdentityMatrix(n);\n    const length = Math.min(origin.length, n - 1);\n\n    for (let i = 0; i < length; ++i) {\n        m[n * (n - 1) + i] = origin[i];\n    }\n    return m;\n}\n\n/**\n * @memberof Matrix\n */\nexport function createWarpMatrix(\n    pos0: number[],\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    nextPos0: number[],\n    nextPos1: number[],\n    nextPos2: number[],\n    nextPos3: number[],\n) {\n    const [x0, y0] = pos0;\n    const [x1, y1] = pos1;\n    const [x2, y2] = pos2;\n    const [x3, y3] = pos3;\n\n    const [u0, v0] = nextPos0;\n    const [u1, v1] = nextPos1;\n    const [u2, v2] = nextPos2;\n    const [u3, v3] = nextPos3;\n\n    const matrix = [\n        x0, 0, x1, 0, x2, 0, x3, 0,\n        y0, 0, y1, 0, y2, 0, y3, 0,\n        1, 0, 1, 0, 1, 0, 1, 0,\n        0, x0, 0, x1, 0, x2, 0, x3,\n        0, y0, 0, y1, 0, y2, 0, y3,\n        0, 1, 0, 1, 0, 1, 0, 1,\n        -u0 * x0, -v0 * x0, -u1 * x1, -v1 * x1, -u2 * x2, -v2 * x2, -u3 * x3, -v3 * x3,\n        -u0 * y0, -v0 * y0, -u1 * y1, -v1 * y1, -u2 * y2, -v2 * y2, -u3 * y3, -v3 * y3,\n    ];\n    const inverseMatrix = invert(matrix, 8);\n\n    if (!inverseMatrix.length) {\n        return [];\n    }\n    const h = multiply(inverseMatrix, [u0, v0, u1, v1, u2, v2, u3, v3], 8);\n\n    h[8] = 1;\n    return convertDimension(transpose(h), 3, 4);\n}\n\n/**\n * @memberof Matrix\n */\nexport function getCenter(points: number[][]) {\n    return [0, 1].map(i => average(points.map(pos => pos[i])));\n}\n"]},"metadata":{},"sourceType":"module"}