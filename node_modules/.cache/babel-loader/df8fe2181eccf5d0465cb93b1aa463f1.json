{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport allCardImages from '../Games/MemoryGameImages/imagedata.json';\nimport { selectedCardImage, imageVisibility } from '../../redux/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { shuffle } from 'lodash';\nimport { ImImages } from 'react-icons/im';\nimport './MemoryGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const [cardImages, setCardImages] = useState([]);\n  const [openedCard, setOpenedCard] = useState([]);\n  const [matched, setMatched] = useState([]); // const allImages = [...cardImages?.images, ...cardImages?.images];\n\n  function flipCard(index) {\n    setOpenedCard(opened => [...opened, index]);\n  }\n\n  const handLoadImage = () => {\n    setCardImages([...(allCardImages === null || allCardImages === void 0 ? void 0 : allCardImages.images), ...(allCardImages === null || allCardImages === void 0 ? void 0 : allCardImages.images)]);\n  };\n\n  const handleGameReset = () => {\n    setCardImages([]);\n    setOpenedCard([]);\n    setMatched([]);\n  };\n\n  useEffect(() => {\n    if (openedCard < 2) return;\n    const firstMatched = cardImages[openedCard[0]];\n    const secondMatched = cardImages[openedCard[1]];\n\n    if (secondMatched && firstMatched.id === secondMatched.id) {\n      setMatched([...matched, firstMatched.id]);\n    }\n\n    if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n  }, [openedCard]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap\",\n      children: cardImages === null || cardImages === void 0 ? void 0 : cardImages.map((img, index) => {\n        let isFlipped = false;\n        if (openedCard.includes(index)) isFlipped = true;\n        if (matched.includes(img.id)) isFlipped = true;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-card ${isFlipped ? \"flipped\" : \"\"} `,\n          onClick: () => flipCard(index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"front\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: img.image,\n                alt: \"\",\n                className: \"w-100 h-100\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"back bg-indigo-900 hover:border-indigo-400\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center my-5\",\n      children: cardImages.length === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handLoadImage(),\n        className: \"text-gray-200 bg-indigo-900 text-xl p-2 rounded-lg\",\n        children: \"START GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGameReset(),\n        className: \"text-gray-200 bg-red-600 text-xl p-2 rounded-lg\",\n        children: \"End GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MemoryGame, \"f5imTg7PqHXaiG3Ul8ldCFloWHY=\");\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx"],"names":["React","useState","useEffect","Container","Row","Col","allCardImages","selectedCardImage","imageVisibility","useSelector","useDispatch","shuffle","ImImages","MemoryGame","cardImages","setCardImages","openedCard","setOpenedCard","matched","setMatched","flipCard","index","opened","handLoadImage","images","handleGameReset","firstMatched","secondMatched","id","length","setTimeout","map","img","isFlipped","includes","image"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Container, Row, Col } from 'react-bootstrap'\nimport allCardImages from '../Games/MemoryGameImages/imagedata.json'\nimport { selectedCardImage, imageVisibility } from '../../redux/actions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { shuffle } from 'lodash'\nimport { ImImages } from 'react-icons/im'\nimport './MemoryGame.css'\n\n\nconst MemoryGame = () => {\n    const [cardImages, setCardImages] = useState([])\n    const [openedCard, setOpenedCard] = useState([]);\n    const [matched, setMatched] = useState([]);\n\n\n    // const allImages = [...cardImages?.images, ...cardImages?.images];\n\n    function flipCard(index) {\n        setOpenedCard((opened) => [...opened, index]);\n    }\n\n    const handLoadImage = () => {\n        setCardImages([...allCardImages?.images, ...allCardImages?.images])\n    }\n\n    const handleGameReset = () => {\n        setCardImages([])\n        setOpenedCard([])\n        setMatched([])\n    }\n\n    useEffect(() => {\n        if (openedCard < 2) return;\n\n        const firstMatched = cardImages[openedCard[0]];\n        const secondMatched = cardImages[openedCard[1]];\n\n        if (secondMatched && firstMatched.id === secondMatched.id) {\n            setMatched([...matched, firstMatched.id]);\n        }\n\n        if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n    }, [openedCard]);\n\n    return (\n        <div className=\"\">\n            <div className=\"flex flex-wrap\">\n                {cardImages?.map((img, index) => {\n\n                    let isFlipped = false;\n\n                    if (openedCard.includes(index)) isFlipped = true;\n                    if (matched.includes(img.id)) isFlipped = true;\n                    return (\n                        <div\n                            className={`image-card ${isFlipped ? \"flipped\" : \"\"} `}\n                            key={index}\n                            onClick={() => flipCard(index)}\n                        >\n                            <div className=\"inner\">\n                                <div className=\"front\">\n                                    <img\n                                        src={img.image}\n                                        alt=\"\"\n                                        className='w-100 h-100'\n                                    />\n                                </div>\n                                <div className=\"back bg-indigo-900 hover:border-indigo-400\"></div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n\n            <div className='text-center my-5'>\n                {cardImages.length === 0\n                    ?\n                    <button onClick={() => handLoadImage()} className=\"text-gray-200 bg-indigo-900 text-xl p-2 rounded-lg\">START GAME</button>\n                    :\n                    <button onClick={() => handleGameReset()} className=\"text-gray-200 bg-red-600 text-xl p-2 rounded-lg\">End GAME</button>\n                }\n            </div>\n        </div>\n    );\n}\n\n\n\n\nexport default MemoryGame\n\n\n"]},"metadata":{},"sourceType":"module"}