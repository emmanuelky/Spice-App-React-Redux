{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport allCardImages from '../Games/MemoryGameImages/imagedata.json';\nimport { selectedCardImage, imageVisibility, memoryGameTotalScore } from '../../redux/actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { shuffle } from 'lodash';\nimport { ImImages } from 'react-icons/im';\nimport './MemoryGame.css';\nimport { Alert } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MemoryGame = () => {\n  _s();\n\n  const [cardImages, setCardImages] = useState([]);\n  const [openedCard, setOpenedCard] = useState([]);\n  const [matched, setMatched] = useState([]);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    shuffle(cardImages);\n  }, [cardImages.length]);\n\n  function flipCard(index) {\n    setOpenedCard(opened => [...opened, index]);\n  }\n\n  const handLoadImage = () => {\n    setCardImages([...(allCardImages === null || allCardImages === void 0 ? void 0 : allCardImages.images), ...(allCardImages === null || allCardImages === void 0 ? void 0 : allCardImages.images)]);\n    dispatch(memoryGameTotalScore([]));\n  };\n\n  const handleGameReset = () => {\n    setCardImages([]);\n    setOpenedCard([]);\n    setMatched([]);\n    dispatch(memoryGameTotalScore([]));\n  };\n\n  let counter = 0;\n  const checkDuplicates = [...new Set(matched)];\n  const gameScore = checkDuplicates === null || checkDuplicates === void 0 ? void 0 : checkDuplicates.map((matched, index) => matched + 1 ? counter + 5 : counter);\n  console.log(checkDuplicates);\n  console.log(matched); // console.log(gameScore)\n\n  useEffect(() => {\n    if (openedCard < 2) return;\n    const firstMatched = cardImages[openedCard[0]];\n    const secondMatched = cardImages[openedCard[1]];\n\n    if (secondMatched && firstMatched.id === secondMatched.id) {\n      setMatched([...matched, firstMatched.id]);\n    }\n\n    if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n    dispatch(memoryGameTotalScore(gameScore));\n  }, [openedCard]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [matched.length === 21 ? /*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"success\",\n      className: \"text-center\",\n      children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n        children: \"Congratulations! You WON!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGameReset(),\n        className: \"text-gray-200 bg-green-600 text-xl my-2 p-2 rounded-lg\",\n        children: \"Play again!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 41\n    }, this) : '', /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap\",\n      children: cardImages === null || cardImages === void 0 ? void 0 : cardImages.map((img, index) => {\n        let isFlipped = false;\n        if (openedCard.includes(index)) isFlipped = true;\n        if (matched.includes(img.id)) isFlipped = true;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `image-card m-1 border-b border-t-2 border-r-2 border-l-2 border-pink-400 ${isFlipped ? \"flipped\" : \"\"} `,\n          onClick: () => flipCard(index),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"front\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: img.image,\n                alt: \"\",\n                className: \"w-100 h-100 rounded-lg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"back bg-indigo-900 hover:bg-indigo-400\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center\",\n      children: cardImages.length === 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handLoadImage(),\n        className: \"text-gray-200 bg-indigo-900 text-xl my-5 p-2 rounded-lg\",\n        children: \"START GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGameReset(),\n        className: \"text-gray-200 bg-red-600 text-xl my-2 p-2 rounded-lg\",\n        children: \"END GAME\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MemoryGame, \"fMNGPbW7CQMSkm0k09lQ7CQ9Mi8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = MemoryGame;\nexport default MemoryGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"sources":["/Users/emmanuelakhereiyere/Desktop/Strive/Spice-App--React-Redux/src/components/Games/MemoryGame.jsx"],"names":["React","useState","useEffect","allCardImages","selectedCardImage","imageVisibility","memoryGameTotalScore","useSelector","useDispatch","shuffle","ImImages","Alert","MemoryGame","cardImages","setCardImages","openedCard","setOpenedCard","matched","setMatched","dispatch","length","flipCard","index","opened","handLoadImage","images","handleGameReset","counter","checkDuplicates","Set","gameScore","map","console","log","firstMatched","secondMatched","id","setTimeout","img","isFlipped","includes","image"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,SAASC,iBAAT,EAA4BC,eAA5B,EAA6CC,oBAA7C,QAAyE,qBAAzE;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAO,kBAAP;AACA,SAASC,KAAT,QAAsB,iBAAtB;;;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC;AAGA,QAAMkB,QAAQ,GAAGX,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,OAAO,CAACI,UAAD,CAAP;AACH,GAFQ,EAEN,CAACA,UAAU,CAACO,MAAZ,CAFM,CAAT;;AAIA,WAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrBN,IAAAA,aAAa,CAAEO,MAAD,IAAY,CAAC,GAAGA,MAAJ,EAAYD,KAAZ,CAAb,CAAb;AACH;;AAED,QAAME,aAAa,GAAG,MAAM;AACxBV,IAAAA,aAAa,CAAC,CAAC,IAAGX,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEsB,MAAlB,CAAD,EAA2B,IAAGtB,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEsB,MAAlB,CAA3B,CAAD,CAAb;AACAN,IAAAA,QAAQ,CAACb,oBAAoB,CAAC,EAAD,CAArB,CAAR;AAIH,GAND;;AAQA,QAAMoB,eAAe,GAAG,MAAM;AAC1BZ,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAC,IAAAA,QAAQ,CAACb,oBAAoB,CAAC,EAAD,CAArB,CAAR;AAGH,GAPD;;AASA,MAAIqB,OAAO,GAAG,CAAd;AACA,QAAMC,eAAe,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQZ,OAAR,CAAJ,CAAxB;AAEA,QAAMa,SAAS,GAAGF,eAAH,aAAGA,eAAH,uBAAGA,eAAe,CAAEG,GAAjB,CAAqB,CAACd,OAAD,EAAUK,KAAV,KAAoBL,OAAO,GAAG,CAAV,GAAcU,OAAO,GAAG,CAAxB,GAA4BA,OAArE,CAAlB;AAEAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,eAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ,EAvCqB,CA0CrB;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AAGZ,QAAIa,UAAU,GAAG,CAAjB,EAAoB;AAEpB,UAAMmB,YAAY,GAAGrB,UAAU,CAACE,UAAU,CAAC,CAAD,CAAX,CAA/B;AACA,UAAMoB,aAAa,GAAGtB,UAAU,CAACE,UAAU,CAAC,CAAD,CAAX,CAAhC;;AAEA,QAAIoB,aAAa,IAAID,YAAY,CAACE,EAAb,KAAoBD,aAAa,CAACC,EAAvD,EAA2D;AACvDlB,MAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAaiB,YAAY,CAACE,EAA1B,CAAD,CAAV;AACH;;AAED,QAAIrB,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6BiB,UAAU,CAAC,MAAMrB,aAAa,CAAC,EAAD,CAApB,EAA0B,IAA1B,CAAV;AAG7BG,IAAAA,QAAQ,CAACb,oBAAoB,CAACwB,SAAD,CAArB,CAAR;AAIH,GAnBQ,EAmBN,CAACf,UAAD,CAnBM,CAAT;AA2BA,sBACI;AAAA,eAKQE,OAAO,CAACG,MAAR,KAAmB,EAAnB,gBAAwB,QAAC,KAAD;AAAO,MAAA,OAAO,EAAC,SAAf;AAAyB,MAAA,SAAS,EAAC,aAAnC;AAAA,8BACpB,QAAC,KAAD,CAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADoB,eAGpB;AAAA;AAAA;AAAA;AAAA,cAHoB,eAIpB;AAAQ,QAAA,OAAO,EAAE,MAAMM,eAAe,EAAtC;AAA0C,QAAA,SAAS,EAAC,wDAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJoB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAxB,GASM,EAdd,eAkBI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBAGKb,UAHL,aAGKA,UAHL,uBAGKA,UAAU,CAAEkB,GAAZ,CAAgB,CAACO,GAAD,EAAMhB,KAAN,KAAgB;AAE7B,YAAIiB,SAAS,GAAG,KAAhB;AAEA,YAAIxB,UAAU,CAACyB,QAAX,CAAoBlB,KAApB,CAAJ,EAAgCiB,SAAS,GAAG,IAAZ;AAChC,YAAItB,OAAO,CAACuB,QAAR,CAAiBF,GAAG,CAACF,EAArB,CAAJ,EAA8BG,SAAS,GAAG,IAAZ;AAC9B,4BACI;AACI,UAAA,SAAS,EAAG,4EAA2EA,SAAS,GAAG,SAAH,GAAe,EAAG,GADtH;AAGI,UAAA,OAAO,EAAE,MAAMlB,QAAQ,CAACC,KAAD,CAH3B;AAAA,iCAKI;AAAK,YAAA,SAAS,EAAC,OAAf;AAAA,oCACI;AAAK,cAAA,SAAS,EAAC,OAAf;AAAA,qCACI;AACI,gBAAA,GAAG,EAAEgB,GAAG,CAACG,KADb;AAEI,gBAAA,GAAG,EAAC,EAFR;AAGI,gBAAA,SAAS,EAAC;AAHd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAQI;AAAK,cAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,oBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ,WAESnB,KAFT;AAAA;AAAA;AAAA;AAAA,gBADJ;AAkBH,OAxBA;AAHL;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAiDI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACKT,UAAU,CAACO,MAAX,KAAsB,CAAtB,gBAEG;AAAQ,QAAA,OAAO,EAAE,MAAMI,aAAa,EAApC;AAAwC,QAAA,SAAS,EAAC,yDAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFH,gBAIG;AAAQ,QAAA,OAAO,EAAE,MAAME,eAAe,EAAtC;AAA0C,QAAA,SAAS,EAAC,sDAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALR;AAAA;AAAA;AAAA;AAAA,YAjDJ;AAAA,kBADJ;AA4DH,CAnID;;GAAMd,U;UAMeJ,W;;;KANfI,U;AAwIN,eAAeA,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport allCardImages from '../Games/MemoryGameImages/imagedata.json'\nimport { selectedCardImage, imageVisibility, memoryGameTotalScore } from '../../redux/actions'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { shuffle } from 'lodash'\nimport { ImImages } from 'react-icons/im'\nimport './MemoryGame.css'\nimport { Alert } from 'react-bootstrap'\n\n\nconst MemoryGame = () => {\n    const [cardImages, setCardImages] = useState([])\n    const [openedCard, setOpenedCard] = useState([]);\n    const [matched, setMatched] = useState([]);\n\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        shuffle(cardImages)\n    }, [cardImages.length])\n\n    function flipCard(index) {\n        setOpenedCard((opened) => [...opened, index]);\n    }\n\n    const handLoadImage = () => {\n        setCardImages([...allCardImages?.images, ...allCardImages?.images])\n        dispatch(memoryGameTotalScore([]))\n\n\n\n    }\n\n    const handleGameReset = () => {\n        setCardImages([])\n        setOpenedCard([])\n        setMatched([])\n        dispatch(memoryGameTotalScore([]))\n\n\n    }\n\n    let counter = 0\n    const checkDuplicates = [...new Set(matched)]\n\n    const gameScore = checkDuplicates?.map((matched, index) => matched + 1 ? counter + 5 : counter)\n\n    console.log(checkDuplicates)\n    console.log(matched)\n\n\n    // console.log(gameScore)\n\n    useEffect(() => {\n\n\n        if (openedCard < 2) return;\n\n        const firstMatched = cardImages[openedCard[0]];\n        const secondMatched = cardImages[openedCard[1]];\n\n        if (secondMatched && firstMatched.id === secondMatched.id) {\n            setMatched([...matched, firstMatched.id]);\n        }\n\n        if (openedCard.length === 2) setTimeout(() => setOpenedCard([]), 1000);\n\n\n        dispatch(memoryGameTotalScore(gameScore))\n\n\n\n    }, [openedCard]);\n\n\n\n\n\n\n\n    return (\n        <>\n            {\n\n\n\n                matched.length === 21 ? <Alert variant=\"success\" className=\"text-center\">\n                    <Alert.Heading>Congratulations! You WON!!!</Alert.Heading>\n\n                    <hr />\n                    <button onClick={() => handleGameReset()} className=\"text-gray-200 bg-green-600 text-xl my-2 p-2 rounded-lg\">Play again!</button>\n\n                </Alert>\n\n\n                    : ''\n\n\n            }\n            <div className=\"flex flex-wrap\">\n\n\n                {cardImages?.map((img, index) => {\n\n                    let isFlipped = false;\n\n                    if (openedCard.includes(index)) isFlipped = true;\n                    if (matched.includes(img.id)) isFlipped = true;\n                    return (\n                        <div\n                            className={`image-card m-1 border-b border-t-2 border-r-2 border-l-2 border-pink-400 ${isFlipped ? \"flipped\" : \"\"} `}\n                            key={index}\n                            onClick={() => flipCard(index)}\n                        >\n                            <div className=\"inner\">\n                                <div className=\"front\">\n                                    <img\n                                        src={img.image}\n                                        alt=\"\"\n                                        className='w-100 h-100 rounded-lg'\n                                    />\n                                </div>\n                                <div className=\"back bg-indigo-900 hover:bg-indigo-400\"></div>\n                            </div>\n                        </div>\n                    );\n                })}\n            </div>\n\n\n            <div className='text-center'>\n                {cardImages.length === 0\n                    ?\n                    <button onClick={() => handLoadImage()} className=\"text-gray-200 bg-indigo-900 text-xl my-5 p-2 rounded-lg\">START GAME</button>\n                    :\n                    <button onClick={() => handleGameReset()} className=\"text-gray-200 bg-red-600 text-xl my-2 p-2 rounded-lg\">END GAME</button>\n                }\n            </div>\n        </>\n    );\n}\n\n\n\n\nexport default MemoryGame\n\n\n"]},"metadata":{},"sourceType":"module"}